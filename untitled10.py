# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SDD1j_3DgX7Ol2zVdwrO8a3bYFbyv59P
"""

!pip install dash pandas plotly pyngrok

from pyngrok import ngrok

# Replace 'your-authtoken' with your actual ngrok authtoken
ngrok.set_auth_token('your-authtoken')

!pip install dash pandas plotly flask

def run_server():
    app.run_server(host='0.0.0.0', port=8081)
output.serve_kernel_port_as_window(8081)

from google.colab import output
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px
import base64
import io
from flask import Flask
import threading

# Create a Flask server
server = Flask(__name__)

# Initialize the Dash app
app = dash.Dash(server=server)

# Define the layout of the app
app.layout = html.Div([
    html.H1("Interactive Data Visualization Platform", style={'text-align': 'center'}),

    dcc.Upload(
        id='upload-data',
        children=html.Div([
            'Drag and Drop or ',
            html.A('Select a File (CSV or XLSX)')
        ]),
        style={
            'width': '100%',
            'height': '60px',
            'lineHeight': '60px',
            'borderWidth': '1px',
            'borderStyle': 'dashed',
            'borderRadius': '5px',
            'textAlign': 'center',
            'margin': '10px'
        },
        multiple=False
    ),

    html.Div(id='output-data-upload'),

    html.Label("Select X-Axis:"),
    dcc.Dropdown(id='x-axis', placeholder="Select X-Axis Column"),

    html.Label("Select Y-Axis:"),
    dcc.Dropdown(id='y-axis', placeholder="Select Y-Axis Column"),

    html.Label("Select Chart Type:"),
    dcc.Dropdown(
        id='chart-type',
        options=[
            {'label': 'Scatter Plot', 'value': 'scatter'},
            {'label': 'Line Plot', 'value': 'line'},
            {'label': 'Bar Chart', 'value': 'bar'},
            {'label': 'Pie Chart', 'value': 'pie'},
            {'label': 'Heatmap', 'value': 'heatmap'},
            {'label': 'Histogram', 'value': 'histogram'},
            {'label': 'Box Plot', 'value': 'box'},
            {'label': 'Violin Plot', 'value': 'violin'},
            {'label': 'Bubble Chart', 'value': 'bubble'},
            {'label': 'Area Chart', 'value': 'area'},
            {'label': 'Radar Chart', 'value': 'radar'},
            {'label': 'Treemap', 'value': 'treemap'},
            {'label': 'Sunburst Chart', 'value': 'sunburst'},
            {'label': 'Funnel Chart', 'value': 'funnel'},
            {'label': 'Waterfall Chart', 'value': 'waterfall'},
            {'label': 'Candlestick Chart', 'value': 'candlestick'},
            {'label': 'Chord Diagram', 'value': 'chord'},
            {'label': 'Sankey Diagram', 'value': 'sankey'},
            {'label': 'Network Diagram', 'value': 'network'},
        ],
        placeholder="Select Chart Type"
    ),

    dcc.Graph(id='graph')
])

def parse_contents(contents):
    content_type, content_string = contents.split(',')
    decoded = base64.b64decode(content_string)
    if content_type.startswith('data:text/csv'):
        df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
    elif content_type.startswith('data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'):
        df = pd.read_excel(io.BytesIO(decoded))
    else:
        raise ValueError('Unsupported file type')
    return df

@app.callback(
    [Output('x-axis', 'options'),
     Output('y-axis', 'options')],
    [Input('upload-data', 'contents')]
)
def update_dropdowns(contents):
    if contents is None:
        return [], []

    df = parse_contents(contents)
    columns = [{'label': col, 'value': col} for col in df.columns]
    return columns, columns

@app.callback(
    Output('graph', 'figure'),
    [Input('x-axis', 'value'),
     Input('y-axis', 'value'),
     Input('chart-type', 'value'),
     Input('upload-data', 'contents')]
)
def update_graph(x_axis, y_axis, chart_type, contents):
    if contents is None or x_axis is None or y_axis is None or chart_type is None:
        return {}

    df = parse_contents(contents)

    if chart_type == 'scatter':
        fig = px.scatter(df, x=x_axis, y=y_axis, title='Scatter Plot')
    elif chart_type == 'line':
        fig = px.line(df, x=x_axis, y=y_axis, title='Line Plot')
    elif chart_type == 'bar':
        fig = px.bar(df, x=x_axis, y=y_axis, title='Bar Chart')
    elif chart_type == 'pie':
        fig = px.pie(df, values=y_axis, names=x_axis, title='Pie Chart')
    elif chart_type == 'heatmap':
        fig = px.imshow(df[[y_axis]].T, labels=dict(x=x_axis, y=y_axis), title='Heatmap')
    elif chart_type == 'histogram':
        fig = px.histogram(df, x=y_axis, title='Histogram')
    elif chart_type == 'box':
        fig = px.box(df, x=x_axis, y=y_axis, title='Box Plot')
    elif chart_type == 'violin':
        fig = px.violin(df, x=x_axis, y=y_axis, title='Violin Plot')
    elif chart_type == 'bubble':
        fig = px.scatter(df, x=x_axis, y=y_axis, size=y_axis, title='Bubble Chart')
    elif chart_type == 'area':
        fig = px.area(df, x=x_axis, y=y_axis, title='Area Chart')
    elif chart_type == 'radar':
        fig = px.line_polar(df, r=y_axis, theta=x_axis, line_close=True, title='Radar Chart')
    elif chart_type == 'treemap':
        fig = px.treemap(df, path=[x_axis], values=y_axis, title='Treemap')
    elif chart_type == 'sunburst':
        fig = px.sunburst(df, path=[x_axis], values=y_axis, title='Sunburst Chart')
    elif chart_type == 'funnel':
        fig = px.funnel(df, x=x_axis, y=y_axis, title='Funnel Chart')
    elif chart_type == 'waterfall':
        fig = px.waterfall(df, x=x_axis, y=y_axis, title='Waterfall Chart')
    elif chart_type == 'candlestick':
        fig = px.candlestick(df, x=x_axis, open='Open', high='High', low='Low', close='Close', title='Candlestick Chart')
    elif chart_type == 'chord':
        fig = px.chord(df, title='Chord Diagram')
    elif chart_type == 'sankey':
        fig = px.sankey(df, node_label=x_axis, link_value=y_axis, title='Sankey Diagram')
    elif chart_type == 'network':
        fig = px.network(df, x=x_axis, y=y_axis, title='Network Diagram')
    else:
        fig = px.scatter(df, x=x_axis, y=y_axis, title='Scatter Plot')

    fig.update_layout(
        title_font=dict(size=24, color='#2D3A4F'),
        xaxis_title=x_axis,
        yaxis_title=y_axis,
        plot_bgcolor='#F2F2F2',
        paper_bgcolor='#FFFFFF',
        margin=dict(l=40, r=40, t=40, b=40)
    )

    return fig

def run_server():
    app.run_server(host='0.0.0.0', port=8081)

t = threading.Thread(target=run_server)
t.start()

# Display the URL
output.serve_kernel_port_as_window(8081)

